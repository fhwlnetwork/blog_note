import{_ as r}from"./chunks/ArticleMetadata.Sb1DYAHo.js";import{_ as o,D as h,o as i,c as p,I as d,w as k,k as t,a as c,R as u,b as g,e as m}from"./chunks/framework.FVQzxbLi.js";import"./chunks/md5.RtphNWHi.js";const P=JSON.parse('{"title":"Docker容器数据卷","description":"","frontmatter":{"title":"Docker容器数据卷","author":"吴建华","date":"2022/10/22 21:25","categories":["docker基础篇"],"tags":["docker","Linux"]},"headers":[],"relativePath":"courses/cloud/01-docker基础篇/09-docker_valumes.md","filePath":"courses/cloud/01-docker基础篇/09-docker_valumes.md","lastUpdated":1702605175000}'),b={name:"courses/cloud/01-docker基础篇/09-docker_valumes.md"},v=t("h1",{id:"docker容器数据卷",tabindex:"-1"},[c("Docker容器数据卷 "),t("a",{class:"header-anchor",href:"#docker容器数据卷","aria-label":'Permalink to "Docker容器数据卷"'},"​")],-1),y=u(`<h2 id="什么是卷" tabindex="-1">什么是卷 <a class="header-anchor" href="#什么是卷" aria-label="Permalink to &quot;什么是卷&quot;">​</a></h2><p>卷就是目录或文件，存在于一个或多个容器中，由docker挂载到容器，但不属于联合文件系统，因此能够绕过Union File System提供一些用于持续存储或共享数据的特性：</p><p>卷的设计目的就是数据的持久化，完全独立于容器的生存周期，因此Docker不会在容器删除时删除其挂载的数据卷</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -it</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --privileged=true</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> /宿主机绝对路径目录:/容器内目录</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">      镜像名</span></span></code></pre></div><h2 id="能干嘛" tabindex="-1"><strong>能干嘛</strong> <a class="header-anchor" href="#能干嘛" aria-label="Permalink to &quot;**能干嘛**&quot;">​</a></h2><p>将运用与运行的环境打包镜像，run后形成容器实例运行 ，但是我们对数据的要求希望是持久化的 Docker容器产生的数据，如果不备份，那么当容器实例删除后，容器内的数据自然也就没有了。 为了能保存数据在docker中我们使用卷。</p><blockquote><p>特点：</p><p>1：数据卷可在容器之间共享或重用数据 2：卷中的更改可以直接实时生效，爽 3：数据卷中的更改不会包含在镜像的更新中 4：数据卷的生命周期一直持续到没有容器使用它为止</p></blockquote><h2 id="数据卷案例" tabindex="-1"><strong>数据卷案例</strong> <a class="header-anchor" href="#数据卷案例" aria-label="Permalink to &quot;**数据卷案例**&quot;">​</a></h2><blockquote><p>命令</p><p>公式：docker run -it -v /宿主机目录:/容器内目录 ubuntu /bin/bash</p></blockquote><h3 id="创建容器" tabindex="-1">创建容器 <a class="header-anchor" href="#创建容器" aria-label="Permalink to &quot;创建容器&quot;">​</a></h3><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[root@wjh </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">~</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]# docker run -it --name myu3 --privileged=true -v /tmp/myHostData:/tmp/myDockerData ubuntu /bin/bash</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">root@f7ef2383e12d:/#</span></span></code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/fhwlnetwork/blos_imgs/img/202202042008187.png" alt=""></p><h3 id="查看数据卷是否挂载成功" tabindex="-1">查看数据卷是否挂载成功 <a class="header-anchor" href="#查看数据卷是否挂载成功" aria-label="Permalink to &quot;查看数据卷是否挂载成功&quot;">​</a></h3><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> [root@wjh </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">~</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]# docker inspect 容器id</span></span></code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/fhwlnetwork/blos_imgs/img/202202042014021.png" alt=""></p><h2 id="读写规则映射添加说明" tabindex="-1">读写规则映射添加说明 <a class="header-anchor" href="#读写规则映射添加说明" aria-label="Permalink to &quot;读写规则映射添加说明&quot;">​</a></h2><h3 id="读写-默认" tabindex="-1">读写(默认) <a class="header-anchor" href="#读写-默认" aria-label="Permalink to &quot;读写(默认)&quot;">​</a></h3><blockquote><p>命令格式：docker run -it --privileged=true -v /宿主机绝对路径目录:/容器内目录:rw 镜像名</p></blockquote><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[root@wjh </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">~</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]# docker run -it --name myu4 --privileged=true -v /tmp/myHostData:/tmp/myDockerData:rw ubuntu /bin/bash</span></span></code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/fhwlnetwork/blos_imgs/img/202202042024320.png" alt=""></p><h3 id="只读" tabindex="-1">只读 <a class="header-anchor" href="#只读" aria-label="Permalink to &quot;只读&quot;">​</a></h3><p>容器实例内部被限制，只能读取不能写</p><blockquote><p>命令格式：docker run -it --privileged=true -v /宿主机绝对路径目录:/容器内目录:ro 镜像名</p></blockquote><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[root@wjh </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">~</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]# docker run -it --name myu5 --privileged=true -v /tmp/myHostData:/tmp/myDockerData:ro ubuntu /bin/bash</span></span></code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/fhwlnetwork/blos_imgs/img/202202042030476.png" alt=""></p><h2 id="卷的继承和共享" tabindex="-1">卷的继承和共享 <a class="header-anchor" href="#卷的继承和共享" aria-label="Permalink to &quot;卷的继承和共享&quot;">​</a></h2><blockquote><p>命令格式： docker run -it --privileged=true --volumes-from 父类 --name u2 ubuntu</p></blockquote><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -it</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --privileged=true</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --volumes-from</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> myu4</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> u2</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> ubuntu</span></span></code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/fhwlnetwork/blos_imgs/img/202202042038467.png" alt=""></p>`,29);function C(s,F,_,D,f,q){const n=r,l=h("ClientOnly");return i(),p("div",null,[v,d(l,null,{default:k(()=>{var a,e;return[(((a=s.$frontmatter)==null?void 0:a.aside)??!0)&&(((e=s.$frontmatter)==null?void 0:e.showArticleMetadata)??!0)?(i(),g(n,{key:0,article:s.$frontmatter},null,8,["article"])):m("",!0)]}),_:1}),y])}const x=o(b,[["render",C]]);export{P as __pageData,x as default};
