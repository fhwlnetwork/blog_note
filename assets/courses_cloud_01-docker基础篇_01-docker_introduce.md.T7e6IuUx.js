import{_ as i}from"./chunks/ArticleMetadata.Sb1DYAHo.js";import{_ as p,D as d,o as a,c as s,I as l,w as k,k as t,a as h,R as u,b as g,e as m}from"./chunks/framework.FVQzxbLi.js";import"./chunks/md5.RtphNWHi.js";const L=JSON.parse('{"title":"docker简介","description":"","frontmatter":{"title":"docker简介","author":"吴建华","date":"2021/01/16 17:58","categories":["docker基础篇"],"tags":["乌班图","docker","linux"]},"headers":[],"relativePath":"courses/cloud/01-docker基础篇/01-docker_introduce.md","filePath":"courses/cloud/01-docker基础篇/01-docker_introduce.md","lastUpdated":1702561947000}'),_={name:"courses/cloud/01-docker基础篇/01-docker_introduce.md"},b=t("h1",{id:"docker简介",tabindex:"-1"},[h("docker简介 "),t("a",{class:"header-anchor",href:"#docker简介","aria-label":'Permalink to "docker简介"'},"​")],-1),q=u('<h2 id="_1、为什么会有docker" tabindex="-1">1、为什么会有docker <a class="header-anchor" href="#_1、为什么会有docker" aria-label="Permalink to &quot;1、为什么会有docker&quot;">​</a></h2><hr><blockquote><p>您要如何确保应用能够在这些环境中运行和通过质量检测？并且在部署过程中不出现令人头疼的版本、配置问题，也无需重新编写代码和进行故障修复？ 答案就是使用容器。Docker之所以发展如此迅速，也是因为它对此给出了一个标准化的解决方案-----系统平滑移植，容器虚拟化技术。</p><p>环境配置相当麻烦，换一台机器，就要重来一次，费力费时。很多人想到，能不能从根本上解决问题，软件可以带环境安装？也就是说，安装的时候，把原始环境一模一样地复制过来。开发人员利用 Docker 可以消除协作编码时“在我的机器上可正常工作”的问题。</p></blockquote><h2 id="_2、什么是到docker" tabindex="-1">2、什么是到docker <a class="header-anchor" href="#_2、什么是到docker" aria-label="Permalink to &quot;2、什么是到docker&quot;">​</a></h2><p>1、docker是基于容器技术的轻量级虚拟化解决方案 2、docker是容器引擎，把linux的cgroup、namespace等容器底层技术进行封装抽象为用户提供了创建和管理容器的便捷界面（包括命令行和api) Docker的主要目标是“Build，Ship and Run Any App,Anywhere”，也就是通过对应用组件的封装、分发、部署、运行等生命周期的管理，使用户的APP（可以是一个WEB应用或数据库应用等等）及其运行环境能够做到 “一次镜像，处处运行”。</p><blockquote><p><strong>总结</strong>：解决了运行环境和配置问题的软件容器，方便做持续集成并有助于整体发布的容器虚拟化技术。</p></blockquote><h2 id="_3、容器与虚拟机比较" tabindex="-1">3、容器与虚拟机比较 <a class="header-anchor" href="#_3、容器与虚拟机比较" aria-label="Permalink to &quot;3、容器与虚拟机比较&quot;">​</a></h2><h3 id="传统虚拟机技术" tabindex="-1">传统虚拟机技术 <a class="header-anchor" href="#传统虚拟机技术" aria-label="Permalink to &quot;传统虚拟机技术&quot;">​</a></h3><p>虚拟机（virtual machine）就是带环境安装的一种解决方案。</p><p>它可以在一种操作系统里面运行另一种操作系统，比如在Windows10系统里面运行Linux系统CentOS7。应用程序对此毫无感知，因为虚拟机看上去跟真实系统一模一样，而对于底层系统来说，虚拟机就是一个普通文件，不需要了就删掉，对其他部分毫无影响。这类虚拟机完美的运行了另一套系统，能够使应用程序，操作系统和硬件三者之间的逻辑不变。</p><blockquote><p><strong>虚拟机的缺点</strong>：1、资源占用多；2、冗余步骤多；3、启动慢</p></blockquote><h3 id="容器虚拟化技术" tabindex="-1">容器虚拟化技术 <a class="header-anchor" href="#容器虚拟化技术" aria-label="Permalink to &quot;容器虚拟化技术&quot;">​</a></h3><p>由于前面虚拟机存在某些缺点，Linux发展出了另一种虚拟化技术：</p><p>Linux容器(Linux Containers，缩写为 LXC)</p><p>Linux容器是与系统其他部分隔离开的一系列进程，从另一个镜像运行，并由该镜像提供支持进程所需的全部文件。容器提供的镜像包含了应用的所有依赖项，因而在从开发到测试再到生产的整个过程中，它都具有可移植性和一致性。</p><p>Linux 容器不是模拟一个完整的操作系统 而是对进程进行隔离。有了容器，就可以将软件运行所需的所有资源打包到一个隔离的容器中。 容器与虚拟机不同，不需要捆绑一整套操作系统 ，只需要软件工作所需的库资源和设置。系统因此而变得高效轻量并保证部署在任何环境中的软件都能始终如一地运行。</p><blockquote><p><strong>对比</strong>:</p><p>比较了 Docker 和传统虚拟化方式的不同之处：</p><p>*传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程；</p><p>*容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核 且也没有进行硬件虚拟 。因此容器要比传统虚拟机更为轻便。</p><p>* 每个容器之间互相隔离，每个容器有自己的文件系统 ，容器之间进程不会相互影响，能区分计算资源。</p></blockquote><h2 id="_4、docker的基本组成" tabindex="-1">4、docker的基本组成 <a class="header-anchor" href="#_4、docker的基本组成" aria-label="Permalink to &quot;4、docker的基本组成&quot;">​</a></h2><h3 id="镜像-image" tabindex="-1">镜像（image) <a class="header-anchor" href="#镜像-image" aria-label="Permalink to &quot;镜像（image)&quot;">​</a></h3><p>Docker 镜像（Image）就是一个<strong>只读</strong>的模板。镜像可以用来创建 Docker 容器，一个镜像可以创建很多容器。</p><p>它也相当于是一个root文件系统。比如官方镜像 centos:7 就包含了完整的一套 centos:7 最小系统的 root 文件系统。</p><p>相当于容器的“源代码”，docker镜像文件类似于Java的类模板，而docker容器实例类似于java中new出来的实例对象。</p><p><img src="https://cdn.jsdelivr.net/gh/fhwlnetwork/blos_imgs/img/20220203114203.png" alt=""></p><h3 id="容器-containner" tabindex="-1">容器(containner) <a class="header-anchor" href="#容器-containner" aria-label="Permalink to &quot;容器(containner)&quot;">​</a></h3><p><strong>1 、从面向对象角度</strong></p><p>Docker 利用容器（Container）独立运行的一个或一组应用，应用程序或服务运行在容器里面，容器就类似于一个虚拟化的运行环境，容器是用镜像创建的运行实例。就像是Java中的类和实例对象一样，镜像是静态的定义，容器是镜像运行时的实体。容器为镜像提供了一个标准的和隔离的运行环境，它可以被启动、开始、停止、删除。每个容器都是相互隔离的、保证安全的平台</p><p><strong>2 、从镜像容器角度</strong></p><p>*<strong>可以把容器看做是一个简易版的 Linux 环境*</strong>（包括root用户权限、进程空间、用户空间和网络空间等）和运行在其中的应用程序。</p><h3 id="仓库-repository" tabindex="-1">仓库(repository) <a class="header-anchor" href="#仓库-repository" aria-label="Permalink to &quot;仓库(repository)&quot;">​</a></h3><p>仓库（Repository）是集中存放镜像文件的场所。</p><p>类似于Maven仓库，存放各种jar包的地方；github仓库，存放各种git项目的地方；Docker公司提供的官方registry被称为Docker Hub，存放各种镜像模板的地方。</p><p>仓库分为公开仓库（Public）和私有仓库（Private）两种形式。最大的公开仓库是 Docker Hub(<a href="https://hub.docker.com/" target="_blank" rel="noreferrer">https://hub.docker.com/</a>)，存放了数量庞大的镜像供用户下载。</p><p>国内的公开仓库包括阿里云 、网易云等</p><blockquote><p><strong>需要正确的理解仓库/镜像/容器这几个概念</strong>:</p><p>Docker 本身是一个容器运行载体或称之为管理引擎。我们把应用程序和配置依赖打包好形成一个可交付的运行环境，这个打包好的运行环境就是image镜像文件。只有通过这个镜像文件才能生成Docker容器实例(类似Java中new出来一个对象)。</p><p>image文件可以看作是容器的模板。Docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例。</p><p><strong>镜像文件</strong></p><p>* image 文件生成的容器实例，本身也是一个文件</p><p>容器实例</p><p>* 一个容器运行一种服务，当我们需要的时候，就可以通过docker客户端创建一个对应的运行实例，也就是我们的容器</p><p>仓库</p><p>* 就是放一堆镜像的地方，我们可以把镜像发布到仓库中，需要的时候再从仓库中拉下来就可以了。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/fhwlnetwork/blos_imgs/img/20220203115026.png" alt=""></p><h2 id="_5、docker工作原理" tabindex="-1">5、docker工作原理 <a class="header-anchor" href="#_5、docker工作原理" aria-label="Permalink to &quot;5、docker工作原理&quot;">​</a></h2><p>Docker是一个Client-Server结构的系统，Docker守护进程运行在主机上， 然后通过Socket连接从客户端访问，守护进程从客户端接受命令并管理运行在主机上的容器。</p><p>容器，是一个运行时环境，就是我们前面说到的集装箱。</p><p>类似于mysql安装完成后再后台有一个服务进程，需要使用时通过客户端组件链接服务，如使用navicat工具链接数据库</p><p><img src="https://cdn.jsdelivr.net/gh/fhwlnetwork/blos_imgs/img/202202031201393.png" alt=""></p><h2 id="_6、整体架构及底层通信原理简述" tabindex="-1">6、整体架构及底层通信原理简述 <a class="header-anchor" href="#_6、整体架构及底层通信原理简述" aria-label="Permalink to &quot;6、整体架构及底层通信原理简述&quot;">​</a></h2><p>Docker 是一个 C/S 模式的架构，后端是一个松耦合架构，众多模块各司其职。</p><blockquote><p>docker运行的基本流程为:</p><p>1、用户是使用docker client 与Docker Daemon建立通信，并发送请求给后者</p><p>2、Docker Daemon作为Docker架构种的主体部分，首先提供Docker server的功能使其可以接受Docker Client的请求</p><p>3、Docker Engine 执行Docker内部的一系列工作，每一项工作都是一个job的形式存在</p><p>4、Job的运行过程中，当需要容器镜像时，则从Docker Registry 中下载镜像，并通过镜像管理驱动Graph driver 将下载镜像以Graph的形式存储。</p><p>5、当需要为Docker 容器运行资源或执行用户指令操作时，则通过Exec driver来完成。</p><p>6、Libcontainer 是一项独立的容器管理包，Network driver以及Exec driver 都是通过Libcontainer 来实现具体对容器进行操作。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/fhwlnetwork/blos_imgs/img/202202032205119.png" alt=""></p><h2 id="_7、docker为什么比虚拟机快" tabindex="-1">7、docker为什么比虚拟机快 <a class="header-anchor" href="#_7、docker为什么比虚拟机快" aria-label="Permalink to &quot;7、docker为什么比虚拟机快&quot;">​</a></h2><p>(1)docker有着比虚拟机更少的抽象层</p><p>由于docker不需要Hypervisor(虚拟机)实现硬件资源虚拟化,运行在docker容器上的程序直接使用的都是实际物理机的硬件资源。因此在CPU、内存利用率上docker将会在效率上有明显优势。</p><p>(2)docker利用的是宿主机的内核,而不需要加载操作系统OS内核</p><p>当新建一个容器时,docker不需要和虚拟机一样重新加载一个操作系统内核。进而避免引寻、加载操作系统内核返回等比较费时费资源的过程,当新建一个虚拟机时,虚拟机软件需要加载OS,返回新建过程是分钟级别的。而docker由于直接利用宿主机的操作系统,则省略了返回过程,因此新建一个docker容器只需要几秒钟。</p><p><img src="https://cdn.jsdelivr.net/gh/fhwlnetwork/blos_imgs/img/202202032225391.png" alt=""><img src="https://cdn.jsdelivr.net/gh/fhwlnetwork/blos_imgs/img/202202032227588.png" alt=""></p>',50);function f(e,D,x,v,P,w){const c=i,n=d("ClientOnly");return a(),s("div",null,[b,l(n,null,{default:k(()=>{var r,o;return[(((r=e.$frontmatter)==null?void 0:r.aside)??!0)&&(((o=e.$frontmatter)==null?void 0:o.showArticleMetadata)??!0)?(a(),g(c,{key:0,article:e.$frontmatter},null,8,["article"])):m("",!0)]}),_:1}),q])}const j=p(_,[["render",f]]);export{L as __pageData,j as default};
