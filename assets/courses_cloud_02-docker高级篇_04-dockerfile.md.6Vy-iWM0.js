import{_ as h}from"./chunks/ArticleMetadata.Sb1DYAHo.js";import{_ as p,D as k,o as e,c as r,I as o,w as d,k as n,a as c,R as g,b as u,e as D}from"./chunks/framework.FVQzxbLi.js";import"./chunks/md5.RtphNWHi.js";const _=JSON.parse('{"title":"DockerFile解析","description":"","frontmatter":{"title":"DockerFile解析","author":"吴建华","date":"2021/01/16 17:58","categories":["docker基础篇"],"tags":["乌班图","docker","linux"]},"headers":[],"relativePath":"courses/cloud/02-docker高级篇/04-dockerfile.md","filePath":"courses/cloud/02-docker高级篇/04-dockerfile.md","lastUpdated":1702564575000}'),y={name:"courses/cloud/02-docker高级篇/04-dockerfile.md"},b=n("h1",{id:"dockerfile解析",tabindex:"-1"},[c("DockerFile解析 "),n("a",{class:"header-anchor",href:"#dockerfile解析","aria-label":'Permalink to "DockerFile解析"'},"​")],-1),F=g(`<h2 id="是什么" tabindex="-1">是什么 <a class="header-anchor" href="#是什么" aria-label="Permalink to &quot;是什么&quot;">​</a></h2><p>Dockerfile是用来构建Docker镜像的文本文件，是由一条条构建镜像所需的指令和参数构成的脚本。</p><h2 id="构建三步骤" tabindex="-1">构建三步骤 <a class="header-anchor" href="#构建三步骤" aria-label="Permalink to &quot;构建三步骤&quot;">​</a></h2><blockquote><p>编写Dockerfile文件 docker build命令构建镜像 docker run依镜像运行容器实例</p></blockquote><h2 id="dockerfile内容基础知识" tabindex="-1">Dockerfile内容基础知识 <a class="header-anchor" href="#dockerfile内容基础知识" aria-label="Permalink to &quot;Dockerfile内容基础知识&quot;">​</a></h2><p>1：每条保留字指令都必须为大写字母且后面要跟随至少一个参数 2：指令按照从上到下，顺序执行 3：#表示注释 4：每条指令都会创建一个新的镜像层并对镜像进行提交</p><h2 id="docker执行dockerfile的大致流程" tabindex="-1">Docker执行Dockerfile的大致流程 <a class="header-anchor" href="#docker执行dockerfile的大致流程" aria-label="Permalink to &quot;Docker执行Dockerfile的大致流程&quot;">​</a></h2><p>（1）docker从基础镜像运行一个容器 （2）执行一条指令并对容器作出修改 （3）执行类似docker commit的操作提交一个新的镜像层 （4）docker再基于刚提交的镜像运行一个新容器 （5）执行dockerfile中的下一条指令直到所有指令都执行完成</p><blockquote><p>从应用软件的角度来看，Dockerfile、Docker镜像与Docker容器分别代表软件的三个不同阶段，</p></blockquote><ul><li>Dockerfile是软件的原材料</li><li>Docker镜像是软件的交付品</li><li>Docker容器则可以认为是软件镜像的运行态，也即依照镜像运行的容器实例 Dockerfile面向开发，Docker镜像成为交付标准，Docker容器则涉及部署与运维，三者缺一不可，合力充当Docker体系的基石。 <img src="https://cdn.jsdelivr.net/gh/fhwlnetwork/blos_imgs/img/202202071303964.bmp" alt=""> 1、Dockerfile，需要定义一个Dockerfile，Dockerfile定义了进程需要的一切东西。Dockerfile涉及的内容包括执行代码或者是文件、环境变量、依赖包、运行时环境、动态链接库、操作系统的发行版、服务进程和内核进程(当应用进程需要和系统服务和内核进程打交道，这时需要考虑如何设计namespace的权限控制)等等; 2、Docker镜像，在用Dockerfile定义一个文件之后，docker build时会产生一个Docker镜像，当运行 Docker镜像时会真正开始提供服务; 3、Docker容器，容器是直接提供服务的。</li></ul><h2 id="dockerfile常用保留字指令" tabindex="-1">DockerFile常用保留字指令 <a class="header-anchor" href="#dockerfile常用保留字指令" aria-label="Permalink to &quot;DockerFile常用保留字指令&quot;">​</a></h2><h3 id="from" tabindex="-1">FROM <a class="header-anchor" href="#from" aria-label="Permalink to &quot;FROM&quot;">​</a></h3><p>基础镜像，当前新镜像是基于哪个镜像的，指定一个已经存在的镜像作为模板，第一条必须是from</p><h3 id="maintainer" tabindex="-1">MAINTAINER <a class="header-anchor" href="#maintainer" aria-label="Permalink to &quot;MAINTAINER&quot;">​</a></h3><p>镜像维护者的姓名和邮箱地址</p><h3 id="run" tabindex="-1">RUN <a class="header-anchor" href="#run" aria-label="Permalink to &quot;RUN&quot;">​</a></h3><p>容器构建时需要运行的命令</p><blockquote><p>两种格式:</p><p>SHELL格式：RUN &lt;命令&gt;</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">RUN</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> yum</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -y</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> vim</span></span></code></pre></div><p>EXEC格式：RUN [&quot;可执行文件&quot;，&quot;参数1&quot;，&quot;参数2&quot;]</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;./test.php&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;dev&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;offline&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">] </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#等价于 RUN ./test.php dev offline</span></span></code></pre></div></blockquote><p>RUN是在 docker build时运行</p><h3 id="expose" tabindex="-1">EXPOSE <a class="header-anchor" href="#expose" aria-label="Permalink to &quot;EXPOSE&quot;">​</a></h3><p>当前容器对外暴露出的端口</p><h3 id="workdir" tabindex="-1">WORKDIR <a class="header-anchor" href="#workdir" aria-label="Permalink to &quot;WORKDIR&quot;">​</a></h3><p>指定在创建容器后，终端默认登陆的进来工作目录，一个落脚点</p><h3 id="user" tabindex="-1">USER <a class="header-anchor" href="#user" aria-label="Permalink to &quot;USER&quot;">​</a></h3><p>指定该镜像以什么样的用户去执行，如果都不指定，默认是root</p><h3 id="env" tabindex="-1">ENV <a class="header-anchor" href="#env" aria-label="Permalink to &quot;ENV&quot;">​</a></h3><p>指定该镜像以什么样的用户去执行，如果都不指定，默认是root ENV MY_PATH /usr/mytest 这个环境变量可以在后续的任何RUN指令中使用，这就如同在命令前面指定了环境变量前缀一样； 也可以在其它指令中直接使用这些环境变量，</p><p>比如：WORKDIR $MY_PATH</p><h3 id="add" tabindex="-1">ADD <a class="header-anchor" href="#add" aria-label="Permalink to &quot;ADD&quot;">​</a></h3><p>将宿主机目录下的文件拷贝进镜像且会自动处理URL和解压tar压缩包</p><h3 id="copy" tabindex="-1">COPY <a class="header-anchor" href="#copy" aria-label="Permalink to &quot;COPY&quot;">​</a></h3><p>类似ADD，拷贝文件和目录到镜像中。 将从构建上下文目录中 &lt;源路径&gt; 的文件/目录复制到新的一层的镜像内的 &lt;目标路径&gt; 位置</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">## Shell形式</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">COPY</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> src</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> dest</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># json形式</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;src&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;dest&quot;]</span></span></code></pre></div><blockquote><p>参数 &lt;src源路径&gt;：源文件或者源目录 &lt;dest目标路径&gt;：容器内的指定路径，该路径不用事先建好，路径不存在的话，会自动创建。</p></blockquote><h3 id="volume" tabindex="-1">VOLUME <a class="header-anchor" href="#volume" aria-label="Permalink to &quot;VOLUME&quot;">​</a></h3><p>容器数据卷，用于数据保存和持久化工作</p><h3 id="cmd" tabindex="-1">CMD <a class="header-anchor" href="#cmd" aria-label="Permalink to &quot;CMD&quot;">​</a></h3><p>指定容器启动后的要干的事情</p><blockquote><p>注意：</p><p>Dockerfile 中可以有多个 CMD 指令，但只有最后一个生效，CMD 会被 docker run 之后的参数替换</p></blockquote><blockquote><p><a style="color:red;">它和前面RUN命令的区别</a> CMD是在docker run 时运行 RUN是在 docker build时运行。</p></blockquote><h3 id="entrypoint" tabindex="-1">ENTRYPOINT <a class="header-anchor" href="#entrypoint" aria-label="Permalink to &quot;ENTRYPOINT&quot;">​</a></h3><p>也是用来指定一个容器启动时要运行的命令,类似于 CMD 指令，但是ENTRYPOINT不会被docker run后面的命令覆盖，而且这些命令行参数会被当作参数送给 ENTRYPOINT 指令指定的程序</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>命令格式: ENTRYPONINT [&quot;&lt;executeable&gt;&quot;,&quot;&lt;param1&gt;&quot;,&quot;param2&quot;.....]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>ENTRYPOINT可以和CMD一起用，一般是变参才会使用 CMD ，这里的 CMD 等于是在给 ENTRYPOINT 传参。</span></span>
<span class="line"><span>当指定了ENTRYPOINT后，CMD的含义就发生了变化，不再是直接运行其命令而是将CMD的内容作为参数传递给ENTRYPOINT指令，他两个组合会变成&lt;ENTRYPONINT &gt;&lt;CMD&gt;</span></span></code></pre></div><blockquote><p>案例如下：假设已通过 Dockerfile 构建了 nginx:test 镜像：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">FROM</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> nginx</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">ENTRTYPOINT[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">&quot;nginx&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">&quot;-c&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">]</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> # 定参</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">CMD</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;/etc/nginx/nginx.conf&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">] </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#变参</span></span></code></pre></div><table><thead><tr><th>是否传参</th><th>按照dockerfile编写执行</th><th>传参运行</th></tr></thead><tbody><tr><td>Docker命令</td><td>docker run nginx:test</td><td>docker run nginx:test -c /etc/nginx/new.conf</td></tr><tr><td>衍生出的实际命令</td><td>nginx -c /etc/nginx/nginx.conf</td><td>nginx -c /etc/nginx/new.conf</td></tr></tbody></table></blockquote><h4 id="优点" tabindex="-1">优点 <a class="header-anchor" href="#优点" aria-label="Permalink to &quot;优点&quot;">​</a></h4><p>在执行docker run的时候可以指定 ENTRYPOINT 运行所需的参数。</p><h4 id="注意" tabindex="-1">注意 <a class="header-anchor" href="#注意" aria-label="Permalink to &quot;注意&quot;">​</a></h4><p>如果 Dockerfile 中如果存在多个 ENTRYPOINT 指令，仅最后一个生效。</p><h2 id="案例" tabindex="-1">案例 <a class="header-anchor" href="#案例" aria-label="Permalink to &quot;案例&quot;">​</a></h2><blockquote><p>自定义镜像mycentosjava8</p><p>要求:Centos7镜像具备vim+ifconfig+jdk8</p><p>jdk下载的镜像地址：<a href="https://mirrors.yangxingzhen.com/jdk/" target="_blank" rel="noreferrer">https://mirrors.yangxingzhen.com/jdk/</a></p></blockquote><h3 id="_1、准备编写dockerfile文件" tabindex="-1">1、准备编写Dockerfile文件 <a class="header-anchor" href="#_1、准备编写dockerfile文件" aria-label="Permalink to &quot;1、准备编写Dockerfile文件&quot;">​</a></h3><blockquote><p>注意：开头字母必须大写</p></blockquote><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[root@wjh </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">~</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]# mkdir myfile</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[root@wjh </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">~</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]# cd myfile</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[root@wjh myfile]# touch Dockerfile</span></span></code></pre></div><div class="language-dockerfile vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dockerfile</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> centos</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">MAINTAINER</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> wjh&lt;849109312@qq.com&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">WORKDIR</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> $MYPATH</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#install vim tools</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> yum -y install vim</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#install ifconfig cat network or ip</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> yum -y isntall net-tools</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#install java8 and lib</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> yum -y install glibc.i686</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> mkdir /usr/local/java</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># ADD is relative path jar,input jdk-8u181-linux-x64.tar.gz to container,package need with dockerfile file on the same path</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">ADD</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> jdk-8u181-linux-x64.tar.gz /usr/local/java/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#set java environment path</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">ENV</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> JAVA_HOME /usr/local/java/jdk1.8.0_171</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">ENV</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> JRE_HOME $JAVA_HOME/jre</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">ENV</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib:$CLASSPATH</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">ENV</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> PATH $JAVA_HOME/bin:$PATH</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">EXPOSE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> 80</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">CMD</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> echo $MYPATH</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">CMD</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> echo </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;success--------------ok&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">CMD</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> /bin/bash</span></span></code></pre></div><h3 id="_2、构建" tabindex="-1">2、构建 <a class="header-anchor" href="#_2、构建" aria-label="Permalink to &quot;2、构建&quot;">​</a></h3><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># docker build -t 新镜像名字:TAG .</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> centosjava8:1.5</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> .</span></span></code></pre></div><blockquote><p>注意，上面TAG后面有个空格，有个点</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/fhwlnetwork/blos_imgs/img/202202071622320.png" alt="image-20220207162213243"></p><h3 id="_3、运行" tabindex="-1">3、运行 <a class="header-anchor" href="#_3、运行" aria-label="Permalink to &quot;3、运行&quot;">​</a></h3><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#docker run -it 新镜像名字:TAG </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -it</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> centosjava8:1.5</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> /bin/bash</span></span></code></pre></div><h2 id="删除虚悬镜像" tabindex="-1">删除虚悬镜像 <a class="header-anchor" href="#删除虚悬镜像" aria-label="Permalink to &quot;删除虚悬镜像&quot;">​</a></h2><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> image</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> ls</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> dangling=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">true</span></span></code></pre></div>`,62);function m(s,A,C,f,q,E){const t=h,l=k("ClientOnly");return e(),r("div",null,[b,o(l,null,{default:d(()=>{var a,i;return[(((a=s.$frontmatter)==null?void 0:a.aside)??!0)&&(((i=s.$frontmatter)==null?void 0:i.showArticleMetadata)??!0)?(e(),u(t,{key:0,article:s.$frontmatter},null,8,["article"])):D("",!0)]}),_:1}),F])}const x=p(y,[["render",m]]);export{_ as __pageData,x as default};
